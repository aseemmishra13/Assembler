/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.assembler;

import com.sun.tools.javac.Main;
import java.awt.Color;
import java.io.File;  // Import the File class
import java.io.FileNotFoundException;  // Import this class to handle errors
import java.io.InputStream;
import java.util.Scanner;
import java.util.HashMap;
import javax.swing.JOptionPane;
import java.util.concurrent.ConcurrentHashMap;
import java.util.*;

/**
 *
 * @author aseemmishra
 */
public class Simulator extends javax.swing.JFrame {

    /**
     * Creates new form Simulator
     */
    public Simulator() {
        initComponents();
        
         
        
    }
    int MAX_ENTRIES=16;
    
   ConcurrentHashMap<String, String> prog = new ConcurrentHashMap<String, String>(); //create a memory to store value and its address
   LinkedHashMap<String, String> Cache = new LinkedHashMap<String, String>(MAX_ENTRIES + 1, .75F, false) {
         protected boolean removeEldestEntry(Map.Entry<String, String> eldest) {
            return size() > MAX_ENTRIES;}
         };
  
   HashMap<String, String> instruct = new HashMap<String, String>();
 
    int programcounter=0; //initialize program counter
    String r="";//genereal register 

    String ix="";//index registers
    String i="";//indirect addressing
    String address="0000";// starting address
    String Halt="Start";//halt var initializedto start
    String x15= "0"; //Instruction toggle bit
    String x14= "0";//Instruction toggle bit
    String x13= "0";//Instruction toggle bit
    String x12= "0";//Instruction toggle bit
    String x11= "0";//Instruction toggle bit
    String x10= "0";//Instruction toggle bit
    String x9= "0";//Instruction toggle bit
    String x8= "0";//Instruction toggle bit
    String x7= "0";//Instruction toggle bit
    String x6= "0";//Instruction toggle bit
    String x5= "0";//Instruction toggle bit
    String x4= "0";//Instruction toggle bit
    String x3= "0";//Instruction toggle bit
    String x2= "0";//Instruction toggle bit
    String x1= "0";//Instruction toggle bit
    String x0= "0";//Instruction toggle bit
    String gpr0="0";//general register
    String gpr1="0";//general register
    String gpr2="0";//general register
    String gpr3="0";//general register
    String ixr1="0";//indirect register
    String ixr2="0";//indirect register
    String ixr3="0";//indirect register
    
    boolean pc1=true;
    boolean negative=false;
    int cc=0;
    int cc1=0;
    int cc2=0;
    int cc3=0;
    int cc4=0;
      String hex;
      
      public static final HashMap<String, String> OPCODE = new HashMap<String, String>();//opcodes mappes to their binary equivalent
	static {
		OPCODE.put("000000", "HLT");
		OPCODE.put("011110", "TRAP");
		OPCODE.put("000001", "LDR");
		OPCODE.put("000010", "STR");
		OPCODE.put("000011", "LDA");
                OPCODE.put("000100", "AMR");
                OPCODE.put("000101", "SMR");
                OPCODE.put("000110", "AIR");
                OPCODE.put("000111", "SIR");
		OPCODE.put("100001", "LDX");
		OPCODE.put("100010", "STX");
		OPCODE.put("001000", "JZ");
                OPCODE.put("001001", "JNE");
                OPCODE.put("001010", "JCC");
                OPCODE.put("001011", "JMA");
                OPCODE.put("001100", "JSR");
                OPCODE.put("001101", "RFS");
                OPCODE.put("001110", "SOB");
                OPCODE.put("001111", "JGE");
                OPCODE.put("010000", "MLT");
                OPCODE.put("010001", "DVD");
                OPCODE.put("010010", "TRR");
                OPCODE.put("010011", "AND");
                OPCODE.put("010100", "ORR");
                OPCODE.put("010101", "NOT");
          
                OPCODE.put("011001", "SRC");
                OPCODE.put("011010", "RRC");
                OPCODE.put("110001", "IN");
                OPCODE.put("110010", "OUT");
                OPCODE.put("110011", "CHK");
                
                System.out.println(OPCODE);
	}
// Code t genereate GUI
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GPR = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        GPR0 = new javax.swing.JTextField();
        GPR1 = new javax.swing.JTextField();
        GPR2 = new javax.swing.JTextField();
        GPR3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        IXR = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        IXR1 = new javax.swing.JTextField();
        IXR2 = new javax.swing.JTextField();
        IXR3 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        PC = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        MAR = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        MBR = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        IR = new javax.swing.JTextField();
        MFR = new javax.swing.JTextField();
        Priviledged = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        Address = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jToggleButton8 = new javax.swing.JToggleButton();
        jToggleButton9 = new javax.swing.JToggleButton();
        jToggleButton11 = new javax.swing.JToggleButton();
        jToggleButton10 = new javax.swing.JToggleButton();
        jToggleButton12 = new javax.swing.JToggleButton();
        I = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jToggleButton17 = new javax.swing.JToggleButton();
        IXR_input = new javax.swing.JPanel();
        jToggleButton15 = new javax.swing.JToggleButton();
        jToggleButton14 = new javax.swing.JToggleButton();
        jLabel17 = new javax.swing.JLabel();
        GPR_input = new javax.swing.JPanel();
        jToggleButton16 = new javax.swing.JToggleButton();
        jToggleButton7 = new javax.swing.JToggleButton();
        jLabel18 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jToggleButton6 = new javax.swing.JToggleButton();
        jToggleButton5 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel14 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        printer = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        keyboard = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        cache = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jButton17 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 255));

        jLabel1.setText("GPR 0");

        jLabel2.setText("GPR 1");

        jLabel3.setText("GPR 2");

        jLabel4.setText("GPR 3");

        jButton1.setText("LD");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("LD");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("LD");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("LD");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout GPRLayout = new javax.swing.GroupLayout(GPR);
        GPR.setLayout(GPRLayout);
        GPRLayout.setHorizontalGroup(
            GPRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GPRLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GPRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(GPRLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(GPR0, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(GPRLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(GPR3))
                    .addGroup(GPRLayout.createSequentialGroup()
                        .addGroup(GPRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(GPRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GPR1)
                            .addComponent(GPR2))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(GPRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GPRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton3)
                        .addComponent(jButton2)
                        .addComponent(jButton4))
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        GPRLayout.setVerticalGroup(
            GPRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GPRLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(GPRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(GPR0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(GPRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(GPR1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(18, 18, 18)
                .addGroup(GPRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(GPR2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(GPRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(GPR3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4)))
        );

        jLabel5.setText("IXR 1");

        jLabel6.setText("IXR 2");

        jLabel7.setText("IXR 3");

        jButton5.setText("LD");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("LD");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("LD");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout IXRLayout = new javax.swing.GroupLayout(IXR);
        IXR.setLayout(IXRLayout);
        IXRLayout.setHorizontalGroup(
            IXRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IXRLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IXRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(27, 27, 27)
                .addGroup(IXRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(IXR1)
                    .addComponent(IXR2)
                    .addComponent(IXR3, javax.swing.GroupLayout.DEFAULT_SIZE, 176, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(IXRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        IXRLayout.setVerticalGroup(
            IXRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IXRLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IXRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(IXR1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(IXRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(IXR2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addGroup(IXRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(IXR3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addGap(15, 15, 15))
        );

        jLabel8.setText("PC");

        jLabel9.setText("MAR");

        jLabel10.setText("MBR");

        jLabel11.setText("IR");

        jLabel12.setText("MFR");

        jLabel13.setText("Priviledged");

        jButton8.setText("LD");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("LD");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("LD");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11)
                    .addComponent(jLabel13)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(PC)
                    .addComponent(MAR)
                    .addComponent(MBR)
                    .addComponent(IR)
                    .addComponent(MFR)
                    .addComponent(Priviledged, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jButton8)
                        .addComponent(jButton9, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jButton10, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(PC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(MAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MBR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton10)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addComponent(IR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(MFR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(Priviledged, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jLabel15.setText("Address");

        jToggleButton8.setText("0");
        jToggleButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton8ActionPerformed(evt);
            }
        });

        jToggleButton9.setText("1");
        jToggleButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton9ActionPerformed(evt);
            }
        });

        jToggleButton11.setText("2");
        jToggleButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton11ActionPerformed(evt);
            }
        });

        jToggleButton10.setText("3");
        jToggleButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton10ActionPerformed(evt);
            }
        });

        jToggleButton12.setText("4");
        jToggleButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton12ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout AddressLayout = new javax.swing.GroupLayout(Address);
        Address.setLayout(AddressLayout);
        AddressLayout.setHorizontalGroup(
            AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddressLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addGap(37, 37, 37))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddressLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jToggleButton12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jToggleButton10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jToggleButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        AddressLayout.setVerticalGroup(
            AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AddressLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(AddressLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton12, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15)
                .addContainerGap())
        );

        jLabel16.setText("I");

        jToggleButton17.setText("5");
        jToggleButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ILayout = new javax.swing.GroupLayout(I);
        I.setLayout(ILayout);
        ILayout.setHorizontalGroup(
            ILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ILayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ILayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jToggleButton17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        ILayout.setVerticalGroup(
            ILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ILayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jToggleButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16)
                .addGap(12, 12, 12))
        );

        jToggleButton15.setText("7");
        jToggleButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton15ActionPerformed(evt);
            }
        });

        jToggleButton14.setText("6");
        jToggleButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton14ActionPerformed(evt);
            }
        });

        jLabel17.setText("IXR");

        javax.swing.GroupLayout IXR_inputLayout = new javax.swing.GroupLayout(IXR_input);
        IXR_input.setLayout(IXR_inputLayout);
        IXR_inputLayout.setHorizontalGroup(
            IXR_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IXR_inputLayout.createSequentialGroup()
                .addGroup(IXR_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(IXR_inputLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel17))
                    .addGroup(IXR_inputLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jToggleButton15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton14)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        IXR_inputLayout.setVerticalGroup(
            IXR_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IXR_inputLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(IXR_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jToggleButton16.setText("8");
        jToggleButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton16ActionPerformed(evt);
            }
        });

        jToggleButton7.setText("9");
        jToggleButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton7ActionPerformed(evt);
            }
        });

        jLabel18.setText("GPR");

        javax.swing.GroupLayout GPR_inputLayout = new javax.swing.GroupLayout(GPR_input);
        GPR_input.setLayout(GPR_inputLayout);
        GPR_inputLayout.setHorizontalGroup(
            GPR_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GPR_inputLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(GPR_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18)
                    .addGroup(GPR_inputLayout.createSequentialGroup()
                        .addComponent(jToggleButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton16)))
                .addGap(17, 17, 17))
        );
        GPR_inputLayout.setVerticalGroup(
            GPR_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GPR_inputLayout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(GPR_inputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18)
                .addGap(12, 12, 12))
        );

        jToggleButton6.setText("10");
        jToggleButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton6ActionPerformed(evt);
            }
        });

        jToggleButton5.setText("11");
        jToggleButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton5ActionPerformed(evt);
            }
        });

        jToggleButton4.setText("12");
        jToggleButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton4ActionPerformed(evt);
            }
        });

        jToggleButton3.setText("13");
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton3ActionPerformed(evt);
            }
        });

        jToggleButton2.setText("14");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jToggleButton1.setText("15");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jLabel14.setText("Operation");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jToggleButton4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton6)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToggleButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel14)
                .addContainerGap(9, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GPR_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(IXR_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(I, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IXR_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GPR_input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(I, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jButton11.setText("Store");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setText("St+");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("Load");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setText("Init");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("SS");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jButton16.setText("Run");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jLabel19.setText("Halt");

        jLabel20.setText("Run");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton14, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton16)
                        .addGap(34, 34, 34)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel19))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11)
                    .addComponent(jButton12)
                    .addComponent(jButton13)
                    .addComponent(jButton14))
                .addGap(26, 26, 26)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton16)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jLabel21.setText("Console Printer");

        jLabel22.setText("Console Keyboard");

        jLabel23.setText("Cache");

        printer.setColumns(20);
        printer.setRows(5);
        jScrollPane4.setViewportView(printer);

        keyboard.setColumns(20);
        keyboard.setRows(5);
        jScrollPane5.setViewportView(keyboard);

        cache.setColumns(20);
        cache.setRows(5);
        jScrollPane6.setViewportView(cache);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane6))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel22)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButton17.setText("Load Program 1");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jButton17)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jButton17)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(GPR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IXR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(74, 74, 74)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 18, Short.MAX_VALUE)))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(GPR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(IXR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton8ActionPerformed
       //code to toggle 1 or 0 in Instruction buttons
        boolean selected = jToggleButton8.getModel().isSelected();
       if (selected){
            x0="1";
    jToggleButton8.setForeground(Color.RED);
           
       }
       else{
           x0="0";
           jToggleButton8.setForeground(Color.BLACK);
       }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton8ActionPerformed

    private void jToggleButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton9ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
          boolean selected = jToggleButton9.getModel().isSelected();
       if (selected){
           x1="1";
            
    jToggleButton9.setForeground(Color.RED);
           
       }
       else{
           x1="0";
           jToggleButton9.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton9ActionPerformed

    private void jToggleButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton11ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
          boolean selected = jToggleButton11.getModel().isSelected();
       if (selected){
            x2="1";
    jToggleButton11.setForeground(Color.RED);
           
       }
       else{
           x2="0";
           jToggleButton11.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton11ActionPerformed

    private void jToggleButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton10ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton10.getModel().isSelected();
       if (selected){
            x3="1";
    jToggleButton10.setForeground(Color.RED);
           
       }
       else{
           x3="0";
           jToggleButton10.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton10ActionPerformed

    private void jToggleButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton12ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton12.getModel().isSelected();
       if (selected){
            x4="1";
    jToggleButton12.setForeground(Color.RED);
           
       }
       else{
           x4="0";
           jToggleButton12.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton12ActionPerformed

    private void jToggleButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton17ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton17.getModel().isSelected();
       if (selected){
            x5="1";
    jToggleButton17.setForeground(Color.RED);
           
       }
       else{
           x5="0";
           jToggleButton17.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton17ActionPerformed

    private void jToggleButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton14ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton14.getModel().isSelected();
       if (selected){
           x6="1";
            
    jToggleButton14.setForeground(Color.RED);
           
       }
       else{
           x6="0";
           jToggleButton14.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton14ActionPerformed

    private void jToggleButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton15ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton15.getModel().isSelected();
       if (selected){
            x7="1";
    jToggleButton15.setForeground(Color.RED);
           
       }
       else{
           x7="0";
           jToggleButton15.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton15ActionPerformed

    private void jToggleButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton16ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton16.getModel().isSelected();
       if (selected){
            x8="1";
    jToggleButton16.setForeground(Color.RED);
           
       }
       else{
           x8="0";
           jToggleButton16.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton16ActionPerformed

    private void jToggleButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton7ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton7.getModel().isSelected();
       if (selected){
            x9="1";
    jToggleButton7.setForeground(Color.RED);
           
       }
       else{
           x9="0";
           jToggleButton7.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton7ActionPerformed

    private void jToggleButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton6ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton6.getModel().isSelected();
       if (selected){
            x10="1";
    jToggleButton6.setForeground(Color.RED);
           
       }
       else{
           x10="0";
           jToggleButton6.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton6ActionPerformed

    private void jToggleButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton5ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton5.getModel().isSelected();
       if (selected){
            x11="1";
    jToggleButton5.setForeground(Color.RED);
           
       }
       else{
           x11="0";
           jToggleButton5.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton5ActionPerformed

    private void jToggleButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton4ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton4.getModel().isSelected();
       if (selected){
            x12="1";
    jToggleButton4.setForeground(Color.RED);
           
       }
       else{
           x12="0";
           jToggleButton4.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton4ActionPerformed

    private void jToggleButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton3ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton3.getModel().isSelected();
       if (selected){
            x13="1";
    jToggleButton3.setForeground(Color.RED);
           
       }
       else{
           x13="0";
           jToggleButton3.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton3ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton2.getModel().isSelected();
       if (selected){
            x14="1";
    jToggleButton2.setForeground(Color.RED);
           
       }
       else{
           x14="0";
           jToggleButton2.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        //code to toggle 1 or 0 in Instruction buttons
         boolean selected = jToggleButton1.getModel().isSelected();
       if (selected){
            x15="1";
    jToggleButton1.setForeground(Color.RED);
           
       }
       else{
           x15="0";
           jToggleButton1.setForeground(Color.BLACK);
       }
    }//GEN-LAST:event_jToggleButton1ActionPerformed
    public void sTringToHexa(){
        //function to combine all bits from instruction buttons to one single binary number which is converted to hexa decimal value
        String finals=x15+x14+x13+x12+x11+x10+x9+x8+x7+x6+x5+x4+x3+x2+x1+x0;//concate each bit
        int binary= Integer.parseInt(finals,2);//convert to binary int
         hex = Integer.toString(binary,16).toUpperCase();//convert to hexa
        if (hex.length() < 4)//add trailing zeroes
    hex = "000".substring(hex.length() - 1) + hex;
        
    }
     
    String EffectiveAddress (String address, String bin){
    //function to calculate and return effective address depeinding on value of "I" bit
    sTringToHexa();
         String add= address;
       
           
             
             // address = bin.substring(6, 8);
             
             //split binary code into different components (indirect addressing,index registers)
             /* 
             
             Effective Address (EA) =
                    I = 0:
                    IX = 00: content (address field)
                    IX = 01 or 10 or 11: content(IX) + content of address field
                    I = 1:
                    IX = 00: content (content (address field))
                    IX = 01 or 10 or 11: content(content(IX) + content of address field)
             */
              i = bin.substring(10, 11);
               ix = bin.substring(8, 10);
               
               
               if ("0".equals(i)){
                   if ("00".equals(ix)){
                       return add;
                   }
                   else if ("01".equals(ix)){
                       int decimal1=Integer.parseInt(add,16); 
                       int decimal2=0;
                       if(IXR1.getText() == null || "".equals( IXR1.getText())){
                       decimal2=0;
                   }else{
                        decimal2=Integer.parseInt(IXR1.getText(),16); 
                       }
                       int sum = decimal1+decimal2;
                     
                       
                       return DecimaltoHexa(sum);
                   }
                   else if ("10".equals(ix)){
                       int decimal1=Integer.parseInt(add,16); 
                       int decimal2=0;
                       if(IXR2.getText() == null || "".equals( IXR2.getText())){
                       decimal2=0;
                   }else{
                        decimal2=Integer.parseInt(IXR2.getText(),16); 
                       }
                       int sum = decimal1+decimal2;
                     
                       
                       return DecimaltoHexa(sum);
                   }
                   else if ("11".equals(ix)){
                       int decimal1=Integer.parseInt(add,16); 
                       int decimal2=0;
                       if(IXR3.getText() == null || "".equals( IXR3.getText())){
                       decimal2=0;
                   }else{
                        decimal2=Integer.parseInt(IXR3.getText(),16); 
                       }
                       int sum = decimal1+decimal2;
                     
                       
                       return DecimaltoHexa(sum);
                   }
               }
               else {
                    if ("00".equals(ix)){
                        
                        return prog.get(add);
                        
                    }
                    else if ("01".equals(ix)){
                       int decimal1=Integer.parseInt(add,16); 
                       int decimal2=0;
                       if(IXR1.getText() == null || "".equals( IXR1.getText())){
                       decimal2=0;
                   }else{
                        decimal2=Integer.parseInt(IXR1.getText(),16); 
                       }
                       int sum = decimal1+decimal2;
                     
                       
                        return prog.get(DecimaltoHexa(sum));
                   }
                   else if ("10".equals(ix)){
                       int decimal1=Integer.parseInt(add,16); 
                       int decimal2=0;
                       if(IXR2.getText() == null || "".equals( IXR2.getText())){
                       decimal2=0;
                   }else{
                        decimal2=Integer.parseInt(IXR2.getText(),16); 
                       }
                       int sum = decimal1+decimal2;
                     
                       
                       return prog.get(DecimaltoHexa(sum));
                   }
                   else if ("11".equals(ix)){
                       int decimal1=Integer.parseInt(add,16); 
                       int decimal2=0;
                       if(IXR3.getText() == null || "".equals( IXR3.getText())){
                       decimal2=0;
                   }else{
                        decimal2=Integer.parseInt(IXR3.getText(),16); 
                       }
                       int sum = decimal1+decimal2;
                     
                       
                        return prog.get(DecimaltoHexa(sum));
                   }
//                   else if ("01".equals(ix)){
//                       int decimal1=Integer.parseInt(prog.get(add),16); 
//                       int decimal2=0;
//                       if(prog.get(IXR1.getText()) == null || "".equals( prog.get(IXR1.getText()))){
//                       decimal2=0;
//                   }else{
//                        decimal2=Integer.parseInt(prog.get(IXR1.getText()),16); 
//                       }
//                       int sum = decimal1+decimal2;
//                     
//                       
//                       return prog.get(DecimaltoHexa(sum));
//                       
//                       
//                      
//                   }
//                   else if ("10".equals(ix)){
//                        int decimal1=Integer.parseInt(prog.get(add),16); 
//                       int decimal2=0;
//                       if(prog.get(IXR2.getText()) == null || "".equals( prog.get(IXR2.getText()))){
//                       decimal2=0;
//                   }else{
//                        decimal2=Integer.parseInt(prog.get(IXR2.getText()),16); 
//                       }
//                       int sum = decimal1+decimal2;
//                     
//                       
//                     return prog.get(DecimaltoHexa(sum));
//                   }
//                   else if ("11".equals(ix)){
//                         int decimal1=Integer.parseInt(prog.get(add),16); 
//                       int decimal2=0;
//                       if(prog.get(IXR3.getText()) == null || "".equals( prog.get(IXR3.getText()))){
//                       decimal2=0;
//                   }else{
//                        decimal2=Integer.parseInt(prog.get(IXR3.getText()),16); 
//                       }
//                       int sum = decimal1+decimal2;
//                     
//                       
//                      return prog.get(DecimaltoHexa(sum));
//                   }
                 
               
               }
                  System.out.println("i"+i+"ix"+ix);
              
              return address;
    }
     String DecimaltoHexa(int dec){
       //convert Decimal to hexa decimal
        hex = String.format("%04x", dec & 0xFFFF).toUpperCase();
//         hex = Integer.toString(dec,16).toUpperCase();
//        if (hex.length() < 4)
//    hex = "000".substring(hex.length() - 1) + hex;
        return hex;
        
    }
   String Hexa(String hexas){
       //accepts binary and returns hexadecimal
        int binary= Integer.parseInt(hexas,2);
         hex = Integer.toString(binary,16).toUpperCase();
        if (hex.length() < 4)
    hex = "000".substring(hex.length() - 1) + hex;
        return hex;
        
    }
     String hexToBinary(String hex)
    {
        //code to accept and convert hexadecimal to binary
        // variable to store the converted
        // Binary Sequence
        String binary = "";
 
        // converting the accepted Hexadecimal
        // string to upper case
        hex = hex.toUpperCase();
 
        // initializing the HashMap class
        HashMap<Character, String> hashMap
            = new HashMap<Character, String>();
 
        // storing the key value pairs
        hashMap.put('0', "0000");
        hashMap.put('1', "0001");
        hashMap.put('2', "0010");
        hashMap.put('3', "0011");
        hashMap.put('4', "0100");
        hashMap.put('5', "0101");
        hashMap.put('6', "0110");
        hashMap.put('7', "0111");
        hashMap.put('8', "1000");
        hashMap.put('9', "1001");
        hashMap.put('A', "1010");
        hashMap.put('B', "1011");
        hashMap.put('C', "1100");
        hashMap.put('D', "1101");
        hashMap.put('E', "1110");
        hashMap.put('F', "1111");
 
        int i;
        char ch;
 
        // loop to iterate through the length
        // of the Hexadecimal String
        for (i = 0; i < hex.length(); i++) {
            // extracting each character
            ch = hex.charAt(i);
 
            // checking if the character is
            // present in the keys
            if (hashMap.containsKey(ch))
 
                // adding to the Binary Sequence
                // the corresponding value of
                // the key
                binary += hashMap.get(ch);
 
            // returning Invalid Hexadecimal
            // String if the character is
            // not present in the keys
            else {
                binary = "Invalid Hexadecimal String";
                return binary;
            }
        }
 
        // returning the converted Binary
        return binary;
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
      //setting value to general purpose register
       sTringToHexa();
        
        GPR1.setText(hex);
        gpr1=GPR1.getText();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         //setting value to general purpose register
         sTringToHexa();
        GPR2.setText(hex);
        gpr2=GPR2.getText();
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         //setting value to general purpose register
        sTringToHexa();
        
        GPR0.setText(hex);
        gpr0=GPR0.getText();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
         //setting value to general purpose register
        sTringToHexa();
        
        GPR3.setText(hex);
        gpr3=GPR3.getText();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
         //setting value to index register
        sTringToHexa();
        
        IXR1.setText(hex);
        ixr1=IXR1.getText();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        //setting value to index register
        sTringToHexa();
        
        IXR2.setText(hex);
        ixr2=IXR2.getText();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        //setting value to index register
        sTringToHexa();
        
        IXR3.setText(hex);
        ixr3=IXR3.getText();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        //setting value to Program counter
        sTringToHexa();
        
        PC.setText(hex);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        //Setting value to MAR
         sTringToHexa();
        
        MAR.setText(hex);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        sTringToHexa();
         //Setting value to MBR
        
        MBR.setText(hex);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        //init button 
        
        //set all text fields,memory,registers and program counters to null/0
        programcounter=0;
     GPR0.setText("");
     GPR1.setText("");
     GPR2.setText("");
     GPR3.setText("");
     IXR1.setText("");
     IXR2.setText("");
     IXR3.setText("");
     MAR.setText("");
     MBR.setText("");
     IR.setText("");
        PC.setText("0000");
        prog.clear();
//        new Simulator().setVisible(true);
//        this.setVisible(false);
     Halt="Start";
      jLabel19.setForeground(Color.BLACK); //Halt button color is black when code is running
     
        
        String[] tokens;
       
        try{
            
        File myObj = new File("IPL.txt"); //opens file "IPL.txt"
      Scanner myReader = new Scanner(myObj);
        
      while (myReader.hasNextLine()) {
        String data = myReader.nextLine();
         tokens = data.split(" ");
         if(prog.size() == 2048){           // sets memory to 2048 words
             JOptionPane.showMessageDialog(null,"Word memory reached");
           
       }else{
         prog.put(tokens[0],tokens[1]);   //sets value and their address in memory
         updateCache(tokens[0],tokens[1]);
         displayCache();
         }
         
         
  
 
 
    
      }
   
       System.out.println(prog);
      myReader.close();
    } catch (FileNotFoundException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        //load button
        String add= MAR.getText(); //extract contect of MAR
        String res = prog.get(add); //extract value at MAR 
        MBR.setText(res);//sets the result value
        System.out.println(res);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        //store
        prog.put(MAR.getText(),MBR.getText());//sets MAR and MBR in memory
        System.out.println(prog);
        updateCache(MAR.getText(),MBR.getText());
        displayCache();
        printer.append(MBR.getText()+"Stored at Address :"+MAR.getText()+"\n");
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
        //run button
      
         sTringToHexa();
          
                   
                  
             
      try{
         while (true){ //iterate over memory
             int  prc=Integer.parseInt(PC.getText(),16);
             String bin =hexToBinary(prog.get(PC.getText())); //extarcts binary from the vlaue staored at i address
           //  programcounter++;
            System.out.println("i" + (prc)+" " +"value"+(bin)); 
             //System.out.println(bin);
             prc++;
             PC.setText(DecimaltoHexa(prc));
         
               execute(PC.getText(),bin); //pass address and converted binary values to  execute function
                
             
            
               IR.setText(bin); //set instruction register
              
//             for (int j =0; j<bin.length();j++){
//                 ind[j]=bin.charAt(j);
//                
//                 
//             }

           //  PC.setText(i); //set program counter
               instruct.put(i,bin); // record instruction and program counter in memory
             
//             if(ind[6]=='1' && ind[7]=='1'){
//            gpr3=prog.get(i);
//                    GPR3.setText(gpr3);
//                
//        }
//             if(ind[6]=='0' && ind[7]=='0'){
//            gpr0=prog.get(i);
//                    GPR0.setText(gpr0);
//                
//        }
//             
//             if(ind[6]=='0' && ind[7]=='1'){
//            gpr1=prog.get(i);
//                    GPR1.setText(gpr1);
//                
//        }
//             if(ind[6]=='1' && ind[7]=='0'){
//            gpr2=prog.get(i);
//                    GPR2.setText(gpr2);
//                
//        }



         }}catch(NullPointerException e)
        
         {     
             jLabel19.setForeground(Color.red); //when halted the font color changes
         
         }
        
        
    }//GEN-LAST:event_jButton16ActionPerformed
public void execute(String prc,String bin) {
    //function to execute the instruction
    
    String opcode = bin.substring(0, 6); //extracts opcode
              r = bin.substring(6, 8); //extracts general register location
		ix = bin.substring(8, 10); //extracts index register location
		i = bin.substring(10, 11); //indirect addressung
		address = bin.substring(11, 16);// exctracts address value
               String add=  EffectiveAddress(Hexa(address),bin); //converts address to effective address
           
              
               
              

              System.out.println(opcode);
                System.out.println(add);
             String instr=OPCODE.get(opcode); //extracts instruction to be executed
             
//               for (String i : instruct.keySet()){
//               //    System.out.println(i+instruct.get(i)+"ix:"+ix+"add"+add);
//                   PC.setText(i);
//            } 
             System.out.println(instr);
             System.out.println(r); 
     if(instr == "HLT"){System.out.println("null");// halt
     Halt="end";
     }
     else{
         //instruction execution
     switch (instr){
                 case "LDR":
                   LDR(opcode,r, ix,i,address, add) ;
                   
                     
                     break;
                 case "LDA":
                     LDA(opcode,r, ix,i,address, add) ;
                      break;
                case "HLT":
                     System.out.println("HLT");
                      Halt="end";
                      break;
                  case "STR":
                      STR(opcode,r, ix,i,address, add) ;
                     
                      break;
                      
                  case "LDX":
                      LDX(opcode,r, ix,i,address, add) ;
                     
                     break;
                      
                case "STX":
                    STX(opcode,r, ix,i,address, add) ;
                                          
                      break;
                      
                case "JZ":
                     JZ(opcode,r,ix,i,address,add);
                     
                      break;
                
                      
                  case "JNE":
                      JNE(opcode,r,ix,i,address,add);
                      
                      break;
                      
                      
                    case "JCC":
                        JCC(opcode,r,ix,i,address,add);
                         
                      break;
                    
                    case "JMA":
                        JMA(opcode,r,ix,i,address,add);
                       
                        break;
                        
                        
                    case "JSR":  
                        JSR(opcode,r,ix,i,address,add);
                        
                        break;
                        
                    case "RFS":
                        RFS(opcode,r,ix,i,address,add);

                        break;
                        
                        
                    case "SOB":
                        SOB(opcode,r,ix,i,address,add);
                     
                      break;
                
                      
                      case "JGE":
                          JGE(opcode,r,ix,i,address,add);
                     
                      break;
                    
                    case "AMR":
                AMR(opcode,r,ix,i,address,add);
                     break;      
                    
                      case "SMR":
                SMR(opcode,r,ix,i,address,add);
                     break;  
                     
                     
                    case "AIR":
                        AIR(opcode,r,ix,i,address,add);
                        
                    
                     break;  
                     
                     
                     
                         case "SIR":
                             SIR(opcode,r,ix,i,address,add);
                        
                     break; 
                     
                     
                     
                    case "MLT":
                        MLT(opcode,r,ix,i,address,add);
                            
                     break;
                     
                     
                      case "DVD":
                           DVD(opcode,r,ix,i,address,add);
                          
                     
                     break;      
                     
                     case "TRR":
                         TRR(opcode,r,ix,i,address,add);
                         
                        
                     
                     break;      
                        
                     
                   
                     case "AND":
                        
                            AND(opcode,r,ix,i,address,add);
                      
                     break; 
                     
                     case "ORR":
                        ORR(opcode,r,ix,i,address,add);
                           
                    
                     break; 
                     
                      case "NOT":
                        NOT(opcode,r,ix,i,address,add);
                           
                  
                     break; 
                     
                     
                 case "SRC":
                        
                        SRC(bin,r);   
                     
                       
                     break;     
                     
                case "RRC": 
                     RRC(bin,r);   
                   
                        break;
                        
                case "IN":
                    IN(r,address);
                    break;
                    
                case "OUT":
                    OUT(r,address);
                    break;    
                 default:
                     System.out.println("b");
                      break;
                     
    
    
        
    }
     }
 
 }
public void OUT(String r,String address){
    if("00001".equals(address)){
        int x = getRxyc(r);
         if ("00".equals(r)){
                     
                       printer.append("\nHexadecimal: "+DecimaltoHexa(x)+ " Decimal :" +x);
                      
                     }
                     else if("01".equals(r)){
                        
                        printer.append("\nHexadecimal: "+DecimaltoHexa(x)+ " Decimal :" +x);
                       
                     }
                      else if("10".equals(r)){
                       
                        printer.append("\nHexadecimal: "+DecimaltoHexa(x)+ " Decimal :" +x);
                    
                     }
                      else if("11".equals(r)){
                    
                       printer.append("\nHexadecimal: "+DecimaltoHexa(x)+ " Decimal :" +x);
                      
                     }
    }
}
public void IN(String r,String address){
    if("00000".equals(address)){
        String S = keyboard.getText();
         if ("00".equals(r)){
                     
                        GPR0.setText(S);
                      
                     }
                     else if("01".equals(r)){
                        
                        GPR1.setText(S);
                       
                     }
                      else if("10".equals(r)){
                       
                        GPR2.setText(S);
                    
                     }
                      else if("11".equals(r)){
                    
                        GPR3.setText(S);
                      
                     }
    }
}
public void LDR(String opcode,String r, String ix,String i, String address,String add){
    if ("00".equals(r)){
                     
                        GPR0.setText(prog.get(add));
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                     else if("01".equals(r)){
                        
                        GPR1.setText(prog.get(add));
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                      else if("10".equals(r)){
                       
                        GPR2.setText(prog.get(add));
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                      else if("11".equals(r)){
                    
                        GPR3.setText(prog.get(add));
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
}

public void LDA(String opcode,String r, String ix,String i, String address,String add){
    
                     if ("00".equals(r)){
                     
                        GPR0.setText(add);
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                     else if("01".equals(r)){
                        
                        GPR1.setText(add);
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                      else if("10".equals(r)){
                       
                        GPR2.setText(add);
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                      else if("11".equals(r)){
                    
                        GPR3.setText(add);
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
}


public void STR(String opcode,String r, String ix,String i, String address,String add){

if ("00".equals(r)){
                     
                        String temp = GPR0.getText();
                        prog.put(add,temp);
                        System.out.println(add+temp);
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                     else if("01".equals(r)){
                        
                        String temp = GPR1.getText();
                        prog.put(add,temp);
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                      else if("10".equals(r)){
                       
                        String temp = GPR2.getText();
                        prog.put(add,temp);
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                      else if("11".equals(r)){
                    
                        String temp = GPR3.getText();
                        prog.put(add,temp);
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                     

}
public void LDX(String opcode,String r, String ix,String i, String address,String add){
     if ("01".equals(ix)){
                         System.out.println("hello");
                        IXR1.setText(prog.get(add));
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                     else if("10".equals(ix)){
                        System.out.println("hello");
                        IXR2.setText(prog.get(add));
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                      else if("11".equals(ix)){
                       System.out.println("hello");
                        IXR3.setText(prog.get(add));
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
}
public void STX(String opcode,String r, String ix,String i, String address,String add){
   if("01".equals(ix)){
                        
                        String temp = IXR1.getText();
                        prog.put(add,temp);
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                      else if("10".equals(ix)){
                       
                        String temp = IXR2.getText();
                        prog.put(add,temp);
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
                      else if("11".equals(ix)){
                    
                        String temp = IXR3.getText();
                        prog.put(add,temp);
                        MAR.setText(add);
                        MBR.setText(prog.get(add));
                     }
 
}

public void JZ(String opcode,String r, String ix,String i, String address,String add){
     if ("00".equals(r)){
                     
                        String temp = GPR0.getText();
                        
                        if("0000".equals(temp)){
                            pc1=false;
                            PC.setText(add);
                     
                            System.out.println(add);
                        }
                        
                     
                     }
                     else if("01".equals(r)){
                        
                        String temp = GPR1.getText();
                        
                        if("0000".equals(temp)){
                            pc1=false;
                            PC.setText(add);
                     
                            System.out.println(add);
                        }
                        
                     }
                      else if("10".equals(r)){
                       
                        String temp = GPR2.getText();
                     if("0000".equals(temp)){
                            pc1=false;
                            PC.setText(add);
                     
                            System.out.println(add);
                        }
                     }
                      else if("11".equals(r)){
                    
                        String temp = GPR3.getText();
                       if("0000".equals(temp)){
                            pc1=false;
                            PC.setText(add);
                     
                            System.out.println(add);
                        }
                     }
                    
}
public void JNE(String opcode,String r, String ix,String i, String address,String add){
    if ("00".equals(r)){
                     
                        String temp = GPR0.getText();
                        
                        if(!"0000".equals(temp)){
                            pc1=false;
                            PC.setText(add);
                     
                            System.out.println(add);
                        }
                        
                     
                     }
                     else if("01".equals(r)){
                        
                        String temp = GPR1.getText();
                        
                        if(!"0000".equals(temp)){
                            pc1=false;
                            PC.setText(add);
                     
                            System.out.println(add);
                        }
                        
                     }
                      else if("10".equals(r)){
                       
                        String temp = GPR2.getText();
                     if(!"0000".equals(temp)){
                            pc1=false;
                            PC.setText(add);
                     
                            System.out.println(add);
                        }
                     }
                      else if("11".equals(r)){
                    
                        String temp = GPR3.getText();
                       if(!"0000".equals(temp)){
                            pc1=false;
                            PC.setText(add);
                     
                            System.out.println(add);
                        }
                     }    
                     
}
public void JCC(String opcode,String r, String ix,String i, String address,String add){
    if(cc!=0){
                         PC.setText(add);
                      System.out.println(add);
                         }
}
public void JMA(String opcode,String r, String ix,String i, String address,String add){
     PC.setText(add);
}
public void JSR(String opcode,String r, String ix,String i, String address,String add){
    String temp=PC.getText();
                    
                        int temp1=Integer.parseInt(temp,16);
                        System.out.println(temp1);
                      GPR3.setText (DecimaltoHexa( temp1)) ;
                      PC.setText(add);
}
public void RFS(String opcode,String r, String ix,String i, String address,String add){
    //                        String hex1 = Integer.toString(Integer.parseInt(address),16).toUpperCase();
//                        if (hex1.length() < 4)
//                        hex1 = "000".substring(hex1.length() - 1) + hex1;
                        
                        
                        GPR0.setText(add);
                        PC.setText(GPR3.getText());
    
}
public void SOB(String opcode,String r, String ix,String i, String address,String add){
   if ("00".equals(r)){
                     
                        String temp2 = GPR0.getText();
                        
                        int temp3=Integer.parseInt(temp2,16)-1;
                       
                      GPR0.setText (DecimaltoHexa( temp3)) ;
                     
                      if(temp3>0){
                          PC.setText(add);
                      }
                     
                        
                     
                     }
                     else if("01".equals(r)){
                        
                       String temp2 = GPR1.getText();
                        
                        int temp3=Integer.parseInt(temp2,16)-1;
                       
                      GPR1.setText (DecimaltoHexa( temp3)) ;
                     
                      if(temp3>0){
                          PC.setText(add);
                      }
                        
                     }
                      else if("10".equals(r)){
                       String temp2 = GPR2.getText();
                        
                        int temp3=Integer.parseInt(temp2,16)-1;
                       
                      GPR2.setText (DecimaltoHexa( temp3)) ;
                     
                      if(temp3>0){
                          PC.setText(add);
                      }
                     }
                      else if("11".equals(r)){
                    
                       String temp2 = GPR3.getText();
                        
                        int temp3=Integer.parseInt(temp2,16)-1;
                       
                      GPR3.setText (DecimaltoHexa( temp3)) ;
                     
                      if(temp3>0){
                          PC.setText(add);
                      }
                     }
                      
}
public void JGE(String opcode,String r, String ix,String i, String address,String add){
     if ("00".equals(r)){
                     
                        String temp2 = GPR0.getText();
                        
                        int temp3=Integer.parseInt(temp2,16)-1;
                       
                      if (negative==true){
                           temp3 = ((Integer.parseInt(Integer.toString(Integer.parseInt(temp2, 16), 2).replace('0', 'X').replace('1', '0').replace('X', '1'), 2) + 1) * -1)-1;
                      }
                     
                      if(temp3+1>=0){
                          PC.setText(add);
                      }
                     
                        
                     
                     }
                     else if("01".equals(r)){
                        
                       String temp2 = GPR1.getText();
                        
                        int temp3=Integer.parseInt(temp2,16)-1;
                       
                    if (negative==true){
                           temp3 = ((Integer.parseInt(Integer.toString(Integer.parseInt(temp2, 16), 2).replace('0', 'X').replace('1', '0').replace('X', '1'), 2) + 1) * -1)-1;
                      }
                     
                      if(temp3+1>=0){
                          PC.setText(add);
                      }
                        
                     }
                      else if("10".equals(r)){
                       String temp2 = GPR2.getText();
                        
                        int temp3=Integer.parseInt(temp2,16)-1;
                       
                   if (negative==true){
                           temp3 = ((Integer.parseInt(Integer.toString(Integer.parseInt(temp2, 16), 2).replace('0', 'X').replace('1', '0').replace('X', '1'), 2) + 1) * -1)-1;
                      }
                     
                      if(temp3+1>=0){
                          PC.setText(add);
                      }
                     }
                      else if("11".equals(r)){
                    
                       String temp2 = GPR3.getText();
                        
                        int temp3=Integer.parseInt(temp2,16)-1;
                       
               if (negative==true){
                           temp3 = ((Integer.parseInt(Integer.toString(Integer.parseInt(temp2, 16), 2).replace('0', 'X').replace('1', '0').replace('X', '1'), 2) + 1) * -1)-1;
                      }
                     
                      if(temp3+1>=0){
                          PC.setText(add);
                      }
                     }
                    
}
public void AMR(String opcode,String r, String ix,String i, String address,String add){
    if ("00".equals(r)){
                           int temp2= Integer.parseInt(prog.get(add),16);
                           int temp3 = Integer.parseInt(GPR0.getText(),16);
                        GPR0.setText(DecimaltoHexa(temp2+temp3));
                       
                     }
                     else if("01".equals(r)){
                        
                        int temp2= Integer.parseInt(prog.get(add),16);
                           int temp3 = Integer.parseInt(GPR1.getText(),16);
                        GPR1.setText(DecimaltoHexa(temp2+temp3));
                     }
                      else if("10".equals(r)){
                       
                       int temp2= Integer.parseInt(prog.get(add),16);
                           int temp3 = Integer.parseInt(GPR2.getText(),16);
                        GPR2.setText(DecimaltoHexa(temp2+temp3));
                     }
                      else if("11".equals(r)){
                    
                     int temp2= Integer.parseInt(prog.get(add),16);
                           int temp3 = Integer.parseInt(GPR3.getText(),16);
                        GPR3.setText(DecimaltoHexa(temp2+temp3));
                     }
                     
}
public void SMR(String opcode,String r, String ix,String i, String address,String add){
  if ("00".equals(r)){
                           int temp2= Integer.parseInt(prog.get(add),16);
                           int temp3 = Integer.parseInt(GPR0.getText(),16);
                        GPR0.setText(DecimaltoHexa(temp3-temp2));
                        if ((temp3-temp2)<0){
                            negative=true;
                        }
                        else{
                            negative=false;
                        }
                       
                     }
                     else if("01".equals(r)){
                        
                        int temp2= Integer.parseInt(prog.get(add),16);
                           int temp3 = Integer.parseInt(GPR1.getText(),16);
                        GPR1.setText(DecimaltoHexa(temp3-temp2));
                        if ((temp3-temp2)<0){
                            negative=true;
                        }
                        else{
                            negative=false;
                        }
                     }
                      else if("10".equals(r)){
                       
                       int temp2= Integer.parseInt(prog.get(add),16);
                           int temp3 = Integer.parseInt(GPR2.getText(),16);
                        GPR2.setText(DecimaltoHexa(temp3-temp2));
                        if ((temp3-temp2)<0){
                            negative=true;
                        }
                        else{
                            negative=false;
                        }
                     }
                      else if("11".equals(r)){
                    
                     int temp2= Integer.parseInt(prog.get(add),16);
                           int temp3 = Integer.parseInt(GPR3.getText(),16);
                        GPR3.setText(DecimaltoHexa(temp3-temp2));
                        if ((temp3-temp2)<0){
                            negative=true;
                        }
                        else{
                            negative=false;
                        }
                     }
                       
}
public void AIR(String opcode,String r, String ix,String i, String address,String add){
  if ("00".equals(r)){
                           int temp2= Integer.parseInt(address,2);
                           int temp3 = Integer.parseInt(GPR0.getText(),16);
                        GPR0.setText(DecimaltoHexa(temp3+temp2));
                      
                       
                     }
                     else if("01".equals(r)){
                        
                        int temp2= Integer.parseInt(address,2);
                           int temp3 = Integer.parseInt(GPR1.getText(),16);
                        GPR1.setText(DecimaltoHexa(temp3+temp2));
                     }
                      else if("10".equals(r)){
                       
                      int temp2= Integer.parseInt(address,2);
                           int temp3 = Integer.parseInt(GPR2.getText(),16);
                        GPR2.setText(DecimaltoHexa(temp3+temp2));
                     }
                      else if("11".equals(r)){
                    
                    int temp2= Integer.parseInt(address,2);
                           int temp3 = Integer.parseInt(GPR3.getText(),16);
                        GPR3.setText(DecimaltoHexa(temp3+temp2));
                     }
                   
}
public void SIR(String opcode,String r, String ix,String i, String address,String add){
     if ("00".equals(r)){
                           int temp2= Integer.parseInt(address,2);
                           int temp3 = Integer.parseInt(GPR0.getText(),16);
                        GPR0.setText(DecimaltoHexa(temp3-temp2));
                       
                     }
                     else if("01".equals(r)){
                        
                        int temp2= Integer.parseInt(address,2);
                           int temp3 = Integer.parseInt(GPR1.getText(),16);
                        GPR1.setText(DecimaltoHexa(temp3-temp2));
                     }
                      else if("10".equals(r)){
                       
                      int temp2= Integer.parseInt(address,2);
                           int temp3 = Integer.parseInt(GPR2.getText(),16);
                        GPR2.setText(DecimaltoHexa(temp3-temp2));
                     }
                      else if("11".equals(r)){
                    
                    int temp2= Integer.parseInt(address,2);
                           int temp3 = Integer.parseInt(GPR3.getText(),16);
                        GPR3.setText(DecimaltoHexa(temp3-temp2));
                     }
                
                    
}
public void MLT(String opcode,String r, String ix,String i, String address,String add){
  int temp2=0;
                            int temp3=0;
                            int high=0;
                            int low=0;
                            int prod=1;
                     if (("00".equals(r) || "10".equals(r)) && ("00".equals(ix) || "10".equals(ix)) ){
                         
                         if ("00".equals(r)){
                          temp2 = Integer.parseInt(GPR0.getText(),16);
                          temp3 = Integer.parseInt(GPR2.getText(),16);
                          prod = temp2*temp3;
                          if (prod>Integer.MAX_VALUE){
                              cc=1;
                              cc1=1;
                              keyboard.append("cc(1)=1");
                          }
                          else{
                              cc1=0;
                              keyboard.append("cc(1)=0");
                              cc=0;
                          }
                          System.out.println(prod);
                          high = prod >> 16;
                          System.out.println(high);
                          low= prod & 0xFFFF;
                          System.out.println(low);
                          GPR0.setText(DecimaltoHexa(high));
                          GPR1.setText(DecimaltoHexa(low));
                         
                         }
                         if ("10".equals(r)){
                              temp2 = Integer.parseInt(GPR0.getText(),16);
                          temp3 = Integer.parseInt(GPR2.getText(),16);
                           prod = temp2*temp3;
                           if (prod>Integer.MAX_VALUE){
                              cc=1;
                              cc1=1;
                          }
                          else{
                              cc1=0;
                          }
                          high = prod>>16;
                          low= prod & 0xFFFF;
                          GPR2.setText(DecimaltoHexa(high));
                          GPR3.setText(DecimaltoHexa(low));
                         }
                       
                    
                       
                     }  
}
public void DVD(String opcode,String r, String ix,String i, String address,String add){
     int temp2=0;
                            int temp3=0;
                            int high=0;
                            int low=0;
                            int prod=1;
                          int  q=1;
                          int rem=0;
                           
                     if (("00".equals(r) || "10".equals(r)) && ("00".equals(ix) || "10".equals(ix)) ){
                         
                         if ("00".equals(r)){
                          temp2 = Integer.parseInt(GPR0.getText(),16);
                          temp3 = Integer.parseInt(GPR2.getText(),16);
                          if(temp3==0){
                              cc=3;
                              cc3=1; 
                              printer.append("cc(3)=1");
                          }
                          else{
                              cc3=0;
                              printer.append("cc(3)=0");
                              cc=0;
                          }
                           System.out.println(temp2);
                           System.out.println(temp3);
                       
                          q=temp2/temp3;
                          System.out.println(q);
                          rem=temp2%temp3;
                          System.out.println(r);
                          GPR0.setText(DecimaltoHexa(q));
                          GPR1.setText(DecimaltoHexa(rem));
                         
                         }
                         if ("10".equals(r)){
                              temp2 = Integer.parseInt(GPR0.getText(),16);
                          temp3 = Integer.parseInt(GPR2.getText(),16);
                           if(temp3==0){
                              cc=3;
                              cc3=1; 
                              printer.append("cc(3)=1");
                          }
                          else{
                              cc3=0;
                          }
                           q=temp2/temp3;
                          System.out.println(q);
                          rem=temp2%temp3;
                          System.out.println(r);
                          GPR2.setText(DecimaltoHexa(q));
                          GPR3.setText(DecimaltoHexa(rem ));
                         }
                       
                    
                       
                     }
                  
}
public void TRR(String opcode,String r, String ix,String i, String address,String add){
   int rx=getRxyc(r);
                         int ry=getRxyc(ix);                        
                            if(rx==ry){
                              cc=4;
                              cc4=1;
                              printer.append("cc(4)=1 \n");
                          }
                            else{
                                printer.append("cc(4)=0 \n");
                                cc4=0;
                                cc=0;
                            }
                          
}
public void AND(String opcode,String r, String ix,String i, String address,String add){
                        int rx=getRxyc(r);
                         int ry=getRxyc(ix);     
                       
                        setRxyc(r,DecimaltoHexa(rx&ry));
}
public void ORR(String opcode,String r, String ix,String i, String address,String add){
                        
                        int rx=getRxyc(r);
                        int ry=getRxyc(ix);
                        setRxyc(r,DecimaltoHexa(rx | ry));
}
public void NOT(String opcode,String r, String ix,String i, String address,String add){
                        int rx=getRxyc(r);
                        
                        setRxyc(r,DecimaltoHexa(~rx & 0xffff));
}
public void SRC(String bin, String r){
    String R= bin.substring(6, 8);
                       int AL = Integer.parseInt(bin.substring(8, 9),2);
                       int LR = Integer.parseInt(bin.substring(9, 10),2);
                       int count = Integer.parseInt(bin.substring(11, 16),2);
                       int data = getRxyc(r);
                       
                        if (AL == 0) {
                            if (LR == 0) {
                                data = data >> count;
                            }
                            if (LR == 1) {
                               data = data << count;
                            }
                        }
                        if (AL == 1) {
                            if (LR == 0) {
                                if (data >= 0)
                                    data = (data >>> count);
                                else {
                                    String x = Integer.toBinaryString(data >>> count);
                                    x = x.replace("1111111111111111", "");
                                    data = Integer.parseInt(x, 2);
                                }
                            }
                            if (LR == 1) {
                                data = data << count;
                            }
                        }
                        setRxyc(R,DecimaltoHexa(data));
                       
    
}
public void RRC(String bin, String r){
    String R= bin.substring(6, 8);
                       int AL = Integer.parseInt(bin.substring(8, 9),2);
                    int  LR = Integer.parseInt(bin.substring(9, 10),2);
                      int  count = Integer.parseInt(bin.substring(11, 16),2);
                     int   data = getRxyc(r); 
                    String first=null;
                    String second =null;
                    String bindata=Integer.toBinaryString(data);
                        if(data>=0){
                            bindata=bindata.replace("0000000000000000", "");
                        }
                      if(data<0){
                          bindata=bindata.replaceAll("1111111111111111", "");
                      }
                         if (LR == 1) {
                                first = bindata.substring(count, bindata.length());
                                second = bindata.substring(0, count);
                                bindata = first + second;
                            }
                            if (LR == 0) {
                                first = bindata.substring(0, bindata.length() - count);
                                second = bindata.substring(bindata.length() - count, bindata.length());
                                 bindata = second + first;
                            }
                            System.out.println(first);
                            System.out.println(second);
                             System.out.println(bindata);
                            data=Integer.parseInt(bindata,2);
                            setRxyc(r,DecimaltoHexa(data));
}
public int getRxyc( String r){
     switch (r){
                             case "00":
                               return Integer.parseInt(GPR0.getText(),16);
                             
                             case "01":
                               return Integer.parseInt(GPR1.getText(),16);
                            
                             case "10":
                               return Integer.parseInt(GPR2.getText(),16);
                               
                             case "11":
                               return  Integer.parseInt(GPR3.getText(),16);
                           
                             default:
                                 break;
                         }
     return 0;
}

public void setRxyc( String r, String data){
     switch (r){
                             case "00":
                               GPR0.setText(data);
                              break;
                             case "01":
                                GPR1.setText(data);
                             break;
                             case "10":
                                GPR2.setText(data);
                                break;
                             case "11":
                              GPR3.setText(data);
                            break;
                             default:
                                 break;
                         }
    
}
 public void updateCache(String address, String data){
               Cache.put(address, data);
              
                
               
               
              
    }
 
 
 public void displayCache(){
     System.out.print(Cache);
     cache.setText("");
     Set <String> keys = Cache.keySet();
     for (String key :keys){
         cache.append("Tag: " + key + " Data: " + Cache.get(key)+ "\n");
     }
 }
    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        //Single Step
         sTringToHexa();
         jLabel19.setForeground(Color.BLACK); //set halt color to black when code is running
       
             
           
             int  prc=Integer.parseInt(PC.getText(),16); //extract program counter value
            try{
              String bin =hexToBinary(prog.get(PC.getText())); // extracts binary form instruction at program counter
         //    String bin =instruct.get(Integer.toString(prc));
         System.out.println(bin);
//             if (prc>=programcounter){
//                 programcounter++;
//                 PC.setText(DecimaltoHexa(programcounter));
//             }
              prc++;
             PC.setText(DecimaltoHexa(prc));
             execute(PC.getText(),bin);// execute the instruction
        
           
             
             pc1=true;
             IR.setText(bin);
             String end=LastAdd(PC.getText());// Halt foreground color changed to red when reached end address
             if("ends".equals(end)){
             jLabel19.setForeground(Color.red);
            // PC.setText("0000");
             
             //  execute(PC.getText(),prog.get(PC.getText()));
             
             
             }
            } catch (NullPointerException e){
                 jLabel19.setForeground(Color.red);
            }
             
             
             
             
              
              
             
        
        
        
        
        
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
         
       
        
    
      
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        //load program1
       // keyboard.setText("1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,14");
     
          String S= keyboard.getText();
          
        int counter =1;
        String[] arrSplit = S.split(",");
     int[] numbers = new int[21];
    
     PC.setText("0020");
        for (int i=0; i < arrSplit.length; i++)
            
    {
      System.out.println(arrSplit[i]);
      numbers[i]=Integer.parseInt(arrSplit[i]);
      prog.put(DecimaltoHexa(counter), DecimaltoHexa(Integer.parseInt(arrSplit[i])));
      counter++;
      printer.append(arrSplit[i]+"\n");
    }
        int searchNumber=numbers[20];
        System.out.println(searchNumber);
        System.out.println(prog);
////        int closestNumber = numbers[0];
////        for (int i = 1; i < 20; i++) {
////            if (Math.abs(numbers[i] - searchNumber) < Math.abs(closestNumber - searchNumber)) {
////                closestNumber = numbers[i];
////            }
////             System.out.println(closestNumber);
////        }
//        GPR0.setText(DecimaltoHexa(closestNumber));
//        printer.append("Closest Number:" +closestNumber);
        String [] tokens;
     try{
            
        File myObj = new File("Program1.txt"); //opens file "IPL.txt"
      Scanner myReader = new Scanner(myObj);
        
      while (myReader.hasNextLine()) {
        String data = myReader.nextLine();
         tokens = data.split(" ");
         if(prog.size() == 2048){           // sets memory to 2048 words
             JOptionPane.showMessageDialog(null,"Word memory reached");
           
       }else{
         prog.put(tokens[0],tokens[1]);   //sets value and their address in memory
         updateCache(tokens[0],tokens[1]);
         displayCache();
         }
         
         
  
 
 
    
      }
   
       System.out.println(prog);
      myReader.close();
    } catch (FileNotFoundException e) {
      System.out.println("An error occurred.");
      e.printStackTrace();
    }
    }//GEN-LAST:event_jButton17ActionPerformed
    
    String LastAdd(String addr){
        int count=0;
        for (String i : prog.keySet()){
            if (i.equals(addr)){
                count++;
            }
        }
        if(count==0){return "ends";}
        System.out.println("count"+count);
        return "hel";
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulator().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Address;
    private javax.swing.JPanel GPR;
    private javax.swing.JTextField GPR0;
    private javax.swing.JTextField GPR1;
    private javax.swing.JTextField GPR2;
    private javax.swing.JTextField GPR3;
    private javax.swing.JPanel GPR_input;
    private javax.swing.JPanel I;
    private javax.swing.JTextField IR;
    private javax.swing.JPanel IXR;
    private javax.swing.JTextField IXR1;
    private javax.swing.JTextField IXR2;
    private javax.swing.JTextField IXR3;
    private javax.swing.JPanel IXR_input;
    private javax.swing.JTextField MAR;
    private javax.swing.JTextField MBR;
    private javax.swing.JTextField MFR;
    private javax.swing.JTextField PC;
    private javax.swing.JTextField Priviledged;
    private javax.swing.JTextArea cache;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton10;
    private javax.swing.JToggleButton jToggleButton11;
    private javax.swing.JToggleButton jToggleButton12;
    private javax.swing.JToggleButton jToggleButton14;
    private javax.swing.JToggleButton jToggleButton15;
    private javax.swing.JToggleButton jToggleButton16;
    private javax.swing.JToggleButton jToggleButton17;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton5;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JToggleButton jToggleButton7;
    private javax.swing.JToggleButton jToggleButton8;
    private javax.swing.JToggleButton jToggleButton9;
    private javax.swing.JTextArea keyboard;
    private javax.swing.JTextArea printer;
    // End of variables declaration//GEN-END:variables
}
